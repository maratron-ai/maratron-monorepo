name: AI Server CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/ai/**'
      - '.github/workflows/ai-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/ai/**'
      - '.github/workflows/ai-ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_maratrondb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: apps/ai

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Set up Python 3.11
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --extra test

      - name: Run code formatting check (ruff format)
        run: uv run ruff format --check src/ tests/

      - name: Run linting (ruff check)
        run: uv run ruff check src/ tests/ --output-format=github

      - name: Run import sorting check (ruff isort)
        run: uv run ruff check --select I src/ tests/

      - name: Run type checking (mypy)
        run: uv run mypy src/ tests/ --ignore-missing-imports --show-error-codes

      - name: Run security linting (bandit)
        run: uv run bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: apps/ai/bandit-report.json

      - name: Run unit tests
        run: uv run pytest tests/unit/ -m unit --cov=src --cov-report=xml --cov-report=html -v

      - name: Run integration tests
        env:
          TEST_DATABASE_URL: postgresql://test:test@localhost:5432/test_maratrondb
          ENVIRONMENT: testing
        run: uv run pytest tests/integration/ -m integration --cov=src --cov-append --cov-report=xml -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: apps/ai
          file: coverage.xml
          flags: ai-server

      - name: Test health check script
        run: uv run python scripts/health_check.py --startup